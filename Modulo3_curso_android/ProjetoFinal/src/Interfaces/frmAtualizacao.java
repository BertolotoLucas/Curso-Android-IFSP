/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import DAO.DisciplinaDAO;
import Modelo.Disciplina;
import java.awt.Toolkit;
import javax.swing.JOptionPane;

/**
 *
 * @author Lucas Bertoloto dos Santos
 */
public class frmAtualizacao extends javax.swing.JFrame {
    //tres atribuitos escenssiais para o funcionamento
    //a disciplina que sera atualizada no banco de dados
    private Disciplina disciplina;
    //a tela de remocao que nao foi fechada e que sera retornada 
    private frmRemocao telaRemocao;
    //atributo da classe que se envolve com o banco 
    private DisciplinaDAO disciplinaDAO;

    /**
     * Creates new form frmAtualizacao
     */
    public frmAtualizacao() {
        initComponents();
    }
    
    //novo construtor da classe, utilizado para atribuir valor aos atributos da classe
    public frmAtualizacao(Disciplina disciplina, DisciplinaDAO dao, frmRemocao telaRemocao) {
        this.disciplina = disciplina;
        this.telaRemocao = telaRemocao;
        this.disciplinaDAO = dao;
        initComponents();
        //colocar um icone da imagem do nosso querido instituto federal <3
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Imagens/LogoIFSP.jpg")));

        //inserir as informacoes da disciplina no formulario
        populaComponentes(this.disciplina);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spnNumCarga = new javax.swing.JSpinner();
        txtNomeCurso = new javax.swing.JTextField();
        cboPeriodos = new javax.swing.JComboBox<>();
        btnCancelar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spnNumVagas = new javax.swing.JSpinner();
        txtNomeDisciplina = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atualização da disciplina");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        spnNumCarga.setToolTipText("Carga horária total da disciplina");
        spnNumCarga.setValue(1);
        spnNumCarga.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnNumCargaStateChanged(evt);
            }
        });

        txtNomeCurso.setToolTipText("Nome do curso que a disciplina pertence");
        txtNomeCurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeCursoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomeCursoKeyTyped(evt);
            }
        });

        cboPeriodos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Integral", "Diurno", "Matutino", "Noturno", "Vespertino" }));
        cboPeriodos.setToolTipText("Período que a disciplina será cursada");
        cboPeriodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboPeriodosItemStateChanged(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Voltar para a tela de remoção de disciplinas sem fazer alguma alteração nesta disciplina");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.setToolTipText("Atualizar a disciplina no banco de dados");
        btnAtualizar.setEnabled(false);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.setToolTipText("Limpar o formulario ");
        btnLimpar.setEnabled(false);
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Formulario para atualizar a disciplina");

        jLabel1.setText("Nome da disciplina:");

        jLabel2.setText("Carga horária:");

        jLabel3.setText("Nome do Curso:");

        jLabel4.setText("Número de vagas:");

        jLabel5.setText("Período:");

        spnNumVagas.setToolTipText("Número de vagas disponibilizadas para cursar esta disciplinas");
        spnNumVagas.setValue(1);
        spnNumVagas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnNumVagasStateChanged(evt);
            }
        });

        txtNomeDisciplina.setToolTipText("Área para digitar o nome desejado para a nova disciplina");
        txtNomeDisciplina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeDisciplinaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomeDisciplinaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomeDisciplina))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txtNomeCurso))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(spnNumCarga, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnNumVagas, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(58, 58, 58)
                        .addComponent(cboPeriodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNomeDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spnNumCarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(spnNumVagas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNomeCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(cboPeriodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnAtualizar)
                    .addComponent(btnLimpar))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void spnNumCargaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnNumCargaStateChanged
        //Verificação para impedir carga horaria nula ou negativa
        int valor = (int) this.spnNumCarga.getValue();
        if(valor<=0){
            //caso seja, colocar o valor como 1.
            this.spnNumCarga.setValue(1);
        }
        //tambem verificar os campos
        verificarCampos();
    }//GEN-LAST:event_spnNumCargaStateChanged

    private void txtNomeCursoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeCursoKeyReleased
        //verificar os campos quando algo for escrito no nome do curso
        verificarCampos();
    }//GEN-LAST:event_txtNomeCursoKeyReleased

    private void txtNomeCursoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeCursoKeyTyped
        //Verificacao do total de caracteres, ja que o banco armazena ate 45 caracteres
        int totalCaracteres = this.txtNomeCurso.getText().length();
        if(totalCaracteres > 45){
            //caso seja, colocar até o caractere 44
            String texto = this.txtNomeCurso.getText();
            String textoLimitado = texto.substring(0, 44);
            this.txtNomeCurso.setText(textoLimitado);
        }
    }//GEN-LAST:event_txtNomeCursoKeyTyped

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        //ir para a janela de remoção de disciplinas
        fecharJanela();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        //ao acionar o botao de atualizar a disciplina, o usuario devera confirmar a sua acao
        if (JOptionPane.showConfirmDialog(rootPane, "Você tem certeza que deseja atualizar a disciplina "+this.disciplina.getNome()+" no banco de dados ?", "Cuidado",
            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            
            //faremos a verificacao se o nome ja existe no banco, primeiro pegaremos o nome digitado pelo usuario
            String nome = this.txtNomeDisciplina.getText();
            
            
            if(this.disciplinaDAO.buscaDisciplina(nome)!=null){
                //ja existe esse nomde de disciplina no banco, nao faremos a atualizacao
                JOptionPane.showMessageDialog(rootPane, "Disciplina ja existe no banco!","Error",JOptionPane.WARNING_MESSAGE);
            } else{
                  //nome nao existe no banco, faremos a atualizacao
                  //pegaremos os dados do formulario
                  int cargaHoraria = (int) this.spnNumCarga.getValue();
                  String curso = this.txtNomeCurso.getText();
                  int vagas = (int) this.spnNumVagas.getValue();
                  String periodo = (String) this.cboPeriodos.getSelectedItem();
                  
                  //criaremos uma nova instancia de Disciplina
                  Disciplina disciplinaAtualizada = new Disciplina(this.disciplina.getIdDisciplina(),nome,cargaHoraria,curso,vagas,periodo); 
                  //metodo para atualizar a disciplina no banco de dados
                  atualizarDiscNoBanco(disciplinaAtualizada);
                  
                  //atualizando o atruibuto da classe, eh algo desnecessario, mas nunca se sabe
                  this.disciplina = disciplinaAtualizada;
                  
                  JOptionPane.showMessageDialog(rootPane, "Disciplina atualizada no banco!","Sucesso",JOptionPane.INFORMATION_MESSAGE);
                  //atualizacao realizada com sucesso, voltaremos para a tela de remocao de disciplina com a tabela atualizada
                  fecharJanela();
                }

        } else {
              //avisar o motivo de nao ter feito a acao, neste caso por que o usuario cancelou
              JOptionPane.showMessageDialog(rootPane, "Operação cancelada pelo usuário!","Error",JOptionPane.ERROR_MESSAGE);    
          }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        //limpar o formulario
        limparFormulario();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void spnNumVagasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnNumVagasStateChanged
        //Verificação para impedir vagas nula ou negativa
        int valor = (int) this.spnNumVagas.getValue();
        if(valor<=0){
            //caso seja, colocar o valor como 1.
            this.spnNumVagas.setValue(1);
        }
        //tambem verificar os campos
        verificarCampos();
    }//GEN-LAST:event_spnNumVagasStateChanged

    private void txtNomeDisciplinaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeDisciplinaKeyReleased
        //verificar os campos depois que alguma coisa foi digitada no nome do curso, assim a gente evita de atualizar a disciplina se estiver com o mesmo nome, algo desnecessario
        verificarCampos();
    }//GEN-LAST:event_txtNomeDisciplinaKeyReleased

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //caso o usuario feche, voltar para a tela de remocao de disciplinas sem algum problema
        fecharJanela();
    }//GEN-LAST:event_formWindowClosed

    private void cboPeriodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboPeriodosItemStateChanged
        //apos mudar periodo no comboBox, verificaremos se e um periodo diferente tambem
        verificarCampos();
    }//GEN-LAST:event_cboPeriodosItemStateChanged

    private void txtNomeDisciplinaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeDisciplinaKeyTyped
        //Verificacao do total de caracteres, ja que o banco armazena ate 45 caracteres
        int totalCaracteres = this.txtNomeDisciplina.getText().length();
        if(totalCaracteres > 45){
            //caso seja, colocar até o caractere 44
            String texto = this.txtNomeDisciplina.getText();
            String textoLimitado = texto.substring(0, 44);
            this.txtNomeDisciplina.setText(textoLimitado);
        }
    }//GEN-LAST:event_txtNomeDisciplinaKeyTyped

    private void fecharJanela() {
        //faremos a atualizacao da tabela da tela de remocao antes de qualquer coisa
        this.telaRemocao.atualizarTabela(telaRemocao.getTbl());
        //mostraremos a tela com a tabela atualizada
        this.telaRemocao.setVisible(true);
        //fechamos a tela de atualizacao
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmAtualizacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmAtualizacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmAtualizacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmAtualizacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmAtualizacao().setVisible(true);
            }
        });
    }
    
    private void verificarCampos(){
        //metodo que ira ativar ou desativar os botoes dependendo da situacao
        //metodo que retorna true caso o que estiver no formulario esteja exatamente igual ao que esta registrado na disciplina, ou seja houve nenhuma mudanca da informacao
        if(valoresPermaneceram()){
            //os valores sao os mesmos, entao nao faz sentido atualizar 
            this.btnAtualizar.setEnabled(false);
        } else{
              //metodo que retorna se um dos dois textField do nosso formulario esta vazio
              if(temTextosVazios()){
                  //Se tiver vazio nao faz sentido limpar ou atualizar a disciplina
                  this.btnLimpar.setEnabled(false);
                  this.btnAtualizar.setEnabled(false);
              } else{
                    //tudo favoravel a atualizar ou limpar os dados dos campos
                    this.btnLimpar.setEnabled(true);
                    this.btnAtualizar.setEnabled(true);
                }
          }
    }

    private boolean valoresPermaneceram() {
        //retorna true caso a disciplina dada pela tela de remocao esteja exatamente igual no formulario
        if (this.txtNomeDisciplina.getText().equals(this.disciplina.getNome())) {
            if (this.txtNomeCurso.getText().equals(this.disciplina.getCurso())) {
                if (this.cboPeriodos.getSelectedItem().equals(this.disciplina.getPeriodo())) {
                    if (this.spnNumCarga.getValue().equals(this.disciplina.getCargaHoraria())) {
                        if (this.spnNumVagas.getValue().equals(this.disciplina.getVagas())) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    
    private boolean temTextosVazios() {
        //acredito que esteja bem intuitiva, se tiver algum textfield vazio retorna true
        return (this.txtNomeCurso.getText().isEmpty() || this.txtNomeDisciplina.getText().isEmpty());
    }

    private void limparFormulario() {
        //acredito estar bem intuitivo
        this.txtNomeCurso.setText("");
        this.txtNomeDisciplina.setText("");
        this.spnNumCarga.setValue(1);
        this.spnNumVagas.setValue(1);
        this.cboPeriodos.setSelectedItem(0);
        this.btnAtualizar.setEnabled(false);
        this.btnLimpar.setEnabled(false);
        this.btnCancelar.setEnabled(true);
    }
    
    private void atualizarDiscNoBanco(Disciplina disc) {
        //atualizar o registro no banco
        this.disciplinaDAO.atualizaDisciplina(disc);
    }
    
    private void populaComponentes(Disciplina disciplina) {
        //inserir todas as informacoes da disciplina no nosso formulario
        this.txtNomeDisciplina.setText(disciplina.getNome());
        this.spnNumCarga.setValue(disciplina.getCargaHoraria());
        this.txtNomeCurso.setText(disciplina.getCurso());
        this.spnNumVagas.setValue(disciplina.getVagas());
        this.cboPeriodos.setSelectedItem(disciplina.getPeriodo());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JComboBox<String> cboPeriodos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSpinner spnNumCarga;
    private javax.swing.JSpinner spnNumVagas;
    private javax.swing.JTextField txtNomeCurso;
    private javax.swing.JTextField txtNomeDisciplina;
    // End of variables declaration//GEN-END:variables

}
